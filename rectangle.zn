//! zinc
    library Rectangle {

        // Помещает любой угол в радианах в диапазон [0 ... 2PI]
        function normalize (real r) -> real {
            return r - 2 * bj_PI * R2I(r / (bj_PI * 2));
        }

        public struct Rectangle {
            real tlx, tly, trx, try, blx, bly, brx, bry;
    
            real cx, cy;
    
            real radians;
    
            real width, height, diagonal;
    
            // Создаёт новый прямоугольник с центром в точке [cx, cy]
            // шириной width и высотой height и углом radians
            static method create(real cx, real cy, real width, real height, real radians) -> Rectradians {
                Rectradians this = Rectradians.allocate();
                this.cx = cx;
                this.cy = cy;
                this.width = width;
                this.height = height;
                this.radians = radians;
                return this.setRadians(radians);
            }

            method destroy() {
                this.deallocate();
            }
    
            // Устанавливает угол поворота прямоугольника
            method setRadians(real radians) -> Rectradians {
                real wa = (bj_PI - Atan(this.height / this.width) * 2) * .5;
                real ar, d;
                real hw = this.width * .5;
                real hh = this.height * .5;
                real hp = bj_PI * .5;

                this.diagonal = SquareRoot(this.width * this.width + this.height * this.height);
                d = this.diagonal * .5;

                this.radians = normalize(radians);
                this.tx = this.cx + hh * Cos(this.radians);
                this.ty = this.cy + hh * Sin(this.radians);

                nr = normalize(radians + hp);
                this.lx = this.cx + hw * Cos(nr);
                this.ly = this.cy + hw * Sin(nr);

                nr = normalize(radians - hp);
                this.rx = this.cx + hw * Cos(nr);
                this.ry = this.cy + hw * Sin(nr);
    
                ar = normalize(radians - wa);
                this.trx = this.cx + d * Cos(ar);
                this.try = this.cy + d * Sin(ar);
    
                ar = normalize(radians + wa);
                this.tlx = this.cx + d * Cos(ar);
                this.tly = this.cy + d * Sin(ar);
    
                radians = radians + bj_PI;
                this.bx = this.cx + hh * Cos(radians);
		        this.by = this.cy + hh * Sin(radians);
    
                ar = normalize(radians - wa);
                this.blx = this.cx + d * Cos(ar);
                this.bly = this.cy + d * Sin(ar);
    
                ar = normalize(radians + wa);
                this.brx = this.cx + d * Cos(ar);
                this.bry = this.cy + d * Sin(ar);

                return this;
            }
    
            // Возвращает квадрат расстояния между точкой [x,y] и ближайшей точкой прямоугольника
            method distanceToXY(real x, real y) -> real {
                real a = normalize(0 - this.radians);
                real cos = Cos(a);
                real sin = Sin(a);
                real xn, yn, dx , dy ;
                real hh = this.height * .5;
                real hw = this.width * .5;

                x = x - this.cx;
                y = y - this.cy;
                xn = x * cos - y * sin;
                yn = x * sin + y * cos;
                x = xn + this.cx;
                y = yn + this.cy;

                dx = RMaxBJ(0, RMaxBJ(this.cx - hh - x, x - (this.cx + hh)));
                dy = RMaxBJ(0, RMaxBJ(this.cy - hw - y, y - (this.cy + hw)));
    
                return dx * dx + dy * dy;
            }

            // Смещает все точки прямоугольника
            method translate(real tx, real ty) -> Rectradians {
                this.cx = this.cx + tx;
                this.cy = this.cy + ty;

                this.tlx = this.tlx + tx;
                this.tly = this.tly + ty;
                this.trx = this.trx + tx;
                this.try = this.try + ty;
                this.blx = this.blx + tx;
                this.bly = this.bly + ty;
                this.brx = this.brx + tx;
                this.bry = this.bry + ty;
                
                return this;
            }

            // Поворачивает прямоугольник вокруг точки [rx, ry] на угол radians
            method rotate(real rx, real ry, real radians) -> Rectradians {
                real cos = Cos(radians);
                real sin = Sin(radians);
                real xn, yn;

                this.cx = this.cx - rx;
                this.cy = this.cy - ry;
                xn = this.cx * cos - this.cy * sin;
                yn = this.cx * sin + this.cy * cos;
                this.cx = xn + rx;
                this.cy = yn + ry;

                return this.setRadians(this.radians + radians);
            }

        }
    }

//! endzinc
