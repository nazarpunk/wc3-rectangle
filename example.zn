native UnitAlive takes unit u returns boolean

    //! zinc
        library Example requires Rectangle {
    
            location loca = Location(0, 0);
            location locb = Location(0, 0);
    
            function tag(string s, real x, real y) {
                texttag tt = CreateTextTag();
                SetTextTagText(tt, s, .02);
                SetTextTagPos(tt, x, y, 0);
                tt = null;
            }
    
            function light(real xa, real ya, real xb, real yb) {
                MoveLocation(loca, xa, ya);
                MoveLocation(locb, xb, yb);
                AddLightningEx("CHIM", true, xa, ya, GetLocationZ(loca), xb, yb, GetLocationZ(locb));
            }
    
            function onInit() {
                integer i;
                trigger t;
                unit u = gg_unit_N000_0002;
                FogEnable(false);
                FogMaskEnable(false);
                SelectUnit(u , true);
                PanCameraToTimed(GetUnitX(u), GetUnitY(u), 0);
                SelectHeroSkill( u, 'A000' );
                u = null;
            
                t = CreateTrigger();
                for (0 <= i < bj_MAX_PLAYER_SLOTS) {
                    TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_SPELL_EFFECT, null);
                }
                TriggerAddCondition(t, Filter(function() -> boolean {
                    return GetSpellAbilityId() == 'A000';
                }));
                TriggerAddAction(t, function() {
                    unit u = GetTriggerUnit();
                    real ux = GetUnitX(u);
                    real uy = GetUnitY(u);
                    real sx = GetSpellTargetX();
                    real sy = GetSpellTargetY();
                    real f = Atan2(sy - uy, sx - ux);
                    group g = CreateGroup();
                    unit t;
                    real tx, ty;
                
                    Rectangle r = Rectangle.create(sx, sy, 200, 400, f);
                
                    tag("tl", r.tlx, r.tly);
                    tag("tr", r.trx, r.try);
                    tag("br", r.brx, r.bry);
                    tag("bl", r.blx, r.bly);
                
                    light(r.tlx, r.tly, r.trx, r.try);
                    light(r.trx, r.try, r.brx, r.bry);
                    light(r.brx, r.bry, r.blx, r.bly);
                    light(r.blx, r.bly, r.tlx, r.tly);
                
            
                    tag("c", r.cx, r.cy);
                    tag("t", r.tx, r.ty);
                    tag("l", r.lx, r.ly);
                    tag("r", r.rx, r.ry);
                    tag("b", r.bx, r.by);
                
                
                    GroupEnumUnitsInRange(g, sx, sy, r.diagonal * .5 + 200, Filter(function() -> boolean {
                        return UnitAlive(GetFilterUnit());
                    }));
    
                    while(true) {
                        t = FirstOfGroup(g);
                        if (t == null) {
                            break;
                        }
                        tx = GetUnitX(t);
                        ty = GetUnitY(t);
    
                        if (!IsUnitOwnedByPlayer(t, GetOwningPlayer(u)) && IsUnitInRangeXY(t, tx, ty + SquareRoot(r.distanceToXY(tx, ty)),0)) {
                            SetUnitExploded(t, true);
                            KillUnit(t);
                        }
    
                        GroupRemoveUnit(g, t);
                    }
                
                
                    u = null;
                    t = null;
                    r.destroy();
                    DestroyGroup(g);
                    g = null;
                });
            
            
                t = null;
            }
        }
    //! endzinc